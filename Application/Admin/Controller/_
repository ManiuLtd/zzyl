<?php
namespace Admin\Controller;
vendor('Common.GetRedis','','.class.php');
vendor('Common.SendFunction','','.class.php');
vendor('Common.Socket','','.class.php');
use Qrcode\QRcode;
class AgentController extends AdminController {
    protected $xiaji = '';
    //代理列表
    public function member_list(){
        //获取所有代理信息
        $type = I('type');
        $search = I('search');
        if($type && $search){
            switch($type){
            	case 1:
            	$where['username'] = $search;
            	break;
            	case 2:
            	$where['userid'] = $search;
            	break;
            	case 3:
            	$where['gamename'] = $search;
            	break;
            	case 4:
            	$where['agentid'] = $search;
            	break;
                case 5:
                $where['real_name'] = $search;
                break;
            }
        }
        $start = I('start');
        $stop = I('stop');
        if($start && $stop){
            $start = strtotime($start);
            $stop = strtotime($stop);
            $where['register_time'] = ['between',[$start,$stop]];
        }
        $data = D('Data')->get_all_data('Agentmember',$where,10,'');
        $member = $data['_data'];
        $redis = \GetRedis::get();
        //获取金币数和房卡数，以及统计下级玩家数和代理数
        foreach($member as $k => $v){
            $jewels = $redis->redis->hget('userInfo|'.$member[$k]['userid'],'jewels');
            $money = $redis->redis->hget('userInfo|'.$member[$k]['userid'],'money');
            $gamename = $redis ->redis->hget('userInfo|'.$member[$k]['userid'],'name');
            $member[$k]['jewels'] = $jewels;
            $member[$k]['money'] = $money;
            $encode = mb_detect_encoding($gamename, array("ASCII",'UTF-8','GB2312',"GBK",'BIG5'));
            $member[$k]['gamename'] = iconv('GB2312','UTF-8',$gamename);
            $member[$k]['user_count'] = M('Bindagentid')->where(['agentID'=>$member[$k]['agentid']])->count();
            $member[$k]['member_count'] = M('Agentmember')->where(['superior_agentid'=>$member[$k]['agentid']])->count();
            $member[$k]['balance'] = sprintf("%.2f",$member[$k]['balance']/100);
            $member[$k]['under_money'] = sprintf("%.2f",$member[$k]['under_money']/100);
            $member[$k]['not_under_money'] = sprintf("%.2f",$member[$k]['not_under_money']/100);
        }
        $this->assign('_data',$member);
        $this->assign('_page',$data['_page']);
        $this->display();
    }


    //代理充值房卡金币
    public function member_recharge(){
        if(IS_POST){
            $my = M('adminmember')->find(UID);
            $userid = (int)I('userid');
            $type   = (int)I('type');
            $amount = (int)I('amount');
            if($amount < 1){
                $this->error('充值数不能小于1');
            }
            //发送消息
            $socket = \Socket::get();
            $send   = new \SendFunction();
            if($socket->connet == false){$this->error('充值失败，原因：服务连接不上');}
            $rechargePacket = $send->makeRechargePacket($userid,$amount,$type);
            $res = $socket -> send($send::RechargeID,1,0,$rechargePacket);
            if(!$res){$this->error('充值失败 原因：向服务器发送请求失败');}
            $read = unpack('i*', $socket->read_data(1024));
            if(!$read){$this->error('充值失败 原因：接收服务器消息失败');}
            if($read[4] != 0){$this->error('充值失败 原因:接收失败，服务器返回状态码为'.$read[4]);}
            if($type==1){
                $goods = '金币';
            }elseif($type==2){
                $goods = '砖石';
            }
            //记录
            $data = [
                'userid'    =>  $userid,
                'goodstype' =>  $type,
                'num'       =>  $amount,
                'sendtype'  =>  1,
                '_desc'     =>  '管理用户'.$my['username'].'为游戏ID为'.$userid.'的代理用户充值'.$amount.$goods,
                'time'      =>  time(),
            ];
            M('agentrecharge')->add($data);
            $this->success('充值成功');
        }else{
            $userid = I('userid');
            $this->assign('userid',$userid);
            $this->display();
        }
    }
    //代理分等级
    public function member_rules(){
        $data = D('Data')->get_all_data('Agentgroup','',10,'id desc');
        $this->assign('_page',$data['_page']);
        $this->assign('_data',$data['_data']);
        $this->display();
    }
    //编辑各级代理权限
    public function group_edit(){
        if(IS_POST){
            $rules = I('rules');
            if(isset($rules)){
                $rules = (array)I('rules');
                sort($rules);
                $str = '';
                foreach($rules as $k => $v){
                    $str.=$v.',';
                }
                $rules = rtrim($str,',');
                $data['rules'] = $rules;
            }
            $data['group_name'] = I('group_name');
            $data['disabled'] = intval(I('disabled'));
            $data['id'] = intval(I('id'));
            if(M('Agentgroup')->save($data)){
                operation_record(UID,'编辑名为'.$data['group_name'].'代理分组');
                $this->success('修改成功');
            }else{
                $this->error('修改失败');
            }
        }else{
            //获取所有的菜单
            $where['hide']  =   0;
            $menus  =   M('Agentmenu')->where($where)->select();
            $this->assign('_menus',$menus);
            $group = M('Agentgroup') -> find(I('get.id'));
            $str = $group['rules'];
            $rules = array();
            $rules = explode(',', $str);
            $rules = json_encode($rules);
            $this->assign('rules',$rules);
            $this->assign('group',$group);
            $this->display();
        }
    }

    //删除分组
    public function group_del(){
        $id = I('id');
        //判断分组下有没有用户
        $member = M('Agentmember')->where(['agent_level'=>$id])->find();
        if($member){
            $this->error('该分组下有用户不能直接删除');
        }
        if(M('Agentgroup')->delete($id)){
            operation_record(UID,'删除代理分组');
            $this->success('删除成功');
        }else{
            $this->error('删除失败');
        }
    }

    //解除绑定
    public function remove_bind(){
        $data['id'] = I('id');
        $data['superior_agentid'] = '';
        $data['superior_username'] = '';
        if(M('Agentmember')->save($data)){
            //解除绑定的同时删掉绑定表的数据
            $userid = M('Agentmember')->where(['id'=>$data['id']])->getField('userid');
            M('Bindagentid')->where(['userID'=>$userid])->delete();
            operation_record(UID,'解除代理绑定');
            $this->success('解绑成功');
        }else{
            $this->error('解绑失败');
        }
    }

    //删除代理
    public function member_del(){
        $id = I('id');
        $member = M('Agentmember')->find($id);
        $under_member = M('Agentmember')->where(['superior_agentid'=>$member['agentid']])->find();
        if($under_member){
            $this->error('该代理下面有下级代理不能直接删除');
        }
        $under_user = M('Bindagentid')->where(['agentID'=>$member['agentid']])->find();
        if($under_user){
            $this->error('该代理下面有玩家不能直接删除');
        }
        if(M('Agentmember')->delete($id)){
             operation_record(UID,'删除用户名为'.$member['username'].'的代理');
            $this->success('删除成功');
        }else{
            $this->error('删除失败');
        }
        
    }

    //添加代理
    public function member_add(){
        if(IS_POST){
            $data['username'] = I('username');
            $data['userid'] = I('userid');
            $data['agent_level'] = I('agent_level');
            $data['disabled'] = I('disabled');
            $password = I('password');
            $repassword = I('repassword');
            $data['wechat'] = I('wechat');
            $data['bankcard'] = I('bankcard');
            $data['real_name'] = I('real_name');
            if(!$data['wechat'] || !$data['bankcard'] || !$data['real_name']){
                $this->error('微信和银行卡和姓名必须添加');
            }
            /* if(!preg_match('/^([1-9]{1})(\d{14}|\d{18})$/', $data['bankcard'])){
                $this->error('请输入正确的银行卡号');
            }*/
            if(!preg_match("/^1[34578]{1}\d{9}$/",$data['username'])){$this->error('请输入正确的代理账号(手机号)');}
            $member = M('Agentmember')->where(['username'=>$data['username']])->find();
            if($member){$this->error('该代理账号已经存在');}
            if(M('Agentmember')->where(['userid'=>$data['userid']])->find()){$this->error('该游戏ID已经被使用');}
            if(M('Agentmember')->where(['wechat'=>$data['wechat']])->find()){$this->error('该微信已经被使用');}
            if(M('Agentmember')->where(['userid'=>$data['bankcard']])->find()){$this->error('该银行卡账号已经被使用');}
            //验证
            $arr = [1,2,3];
            if(!in_array($data['agent_level'],$arr)){$this->error('请选择代理级别');}
            $redis = \GetRedis::get();
            $user = $redis->redis->hgetall('userInfo|'.$data['userid']);
            /*if(!$user){$this->error('游戏ID不存在');}*/
            if($password !== $repassword){$this->error('两次密码不一致');}
            if(strlen($password) <6){$this->error('登录密码不能低于6位数');}
            //验证完成根据游戏ID获取游戏昵称以及上级代理的登录账号和邀请码
            $res = $this->get_superior($data['userid']);
            $data['superior_agentid'] = $res['superior_agentid'];
            $data['superior_username'] = $res['superior_username'];
            $data['register_time'] = time();
            $data['password'] = md5($password);
            // $data['agentid'] = $this->get_max_agentid()+1;
            $data['agentid'] = $this->get_max_agentid()+1;
            //获取最大的agentid
            if($id = M('Agentmember')->add($data)){
                operation_record(UID,'添加代理'.$data['username']);
                $url = 'http://ht.szhuomei.com/Home/Wechat/share/userID/'.$data['userid'].'/agentID/'.$data['agentid'];
                $find = M()->table('userInfo')->where(['userID'=>$data['userid']])->find();
                $this->personal_send_email($data['userid'],$data['agent_level'],$data['agentid']);
                $this->download_file($find['headurl'],'./Uploads/qrcode/'.md5('Agent'.$find['userid']).'.jpg');
                $this->scerweima1($url,$data['userid'],'./Uploads/qrcode/'.md5('Agent'.$find['userid']).'.jpg',$find['name'],$data['agentid']);
                $res = D('Home/Message')->agentQrcode($id);
        if(!$res){
                $this->error('生成二维码失败!');
                }
        $this->success('添加成功');
            }else{
                $this->error('添加失败');
            }
        }else{
            //查询代理等级
            $group = M('Agentgroup')->select();
            $this->assign('group',$group);
            $this->display();
        }
    }


// 下载头像
    public function download_file($file_url, $save_to){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_POST, 0); 
        curl_setopt($ch,CURLOPT_URL,$file_url); 
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
        $file_content = curl_exec($ch);
        curl_close($ch);
 
        $downloaded_file = fopen($save_to, 'w');
        fwrite($downloaded_file, $file_content);
        fclose($downloaded_file);
    }


    // 生成二维码
    public function scerweima1($url='',$id='',$head='',$nickname='',$agentid='',$img='./Uploads/qrcode/agent_img.jpg'){  
        echo $url;
	$value                = $url; //二维码内容
        $errorCorrectionLevel = 'H'; //容错级别
        $matrixPointSize      = 7; //生成图片大小
        //生成二维码图片
        $filename = './Uploads/qrcode/'.$id.'_agent_qrcode.png';
        QRcode::png($value, $filename, $errorCorrectionLevel, $matrixPointSize, 2);

        $logo = './Uploads/qrcode/qrcode.png'; //准备好的logo图片
        $QR   = $filename; //已经生成的原始二维码图


        // 生成二维码
        if (file_exists($logo)) {
            $QR             = imagecreatefromstring(file_get_contents($QR)); //目标图象连接资源。
            $logo           = imagecreatefromstring(file_get_contents($logo)); //源图象连接资源。
            $QR_width       = imagesx($QR); //二维码图片宽度
            $QR_height      = imagesy($QR); //二维码图片高度
            $logo_width     = imagesx($logo); //logo图片宽度
            $logo_height    = imagesy($logo); //logo图片高度
            $logo_qr_width  = $QR_width / 3; //组合之后logo的宽度(占二维码的1/5)
            $scale          = $logo_width / $logo_qr_width; //logo的宽度缩放比(本身宽度/组合后的宽度)
            $logo_qr_height = $logo_height / $scale; //组合之后logo的高度
            $from_width     = ($QR_width - $logo_qr_width) / 2; //组合之后logo左上角所在坐标点

            //重新组合图片并调整大小
            /*
             *  imagecopyresampled() 将一幅图像(源图象)中的一块正方形区域拷贝到另一个图像中
             */
            imagecopyresampled($QR, $logo, $from_width, $from_width, 0, 0, $logo_qr_width, $logo_qr_height, $logo_width, $logo_height);
        }

        //输出图片
        $png = './Uploads/qrcode/'.md5($id) . '.png';
        $res = imagepng($QR, $png);
        imagedestroy($QR);
        imagedestroy($logo);
        
        // 合成二维码
        if($res){
            $logo = $png;           //准备好的logo图片     
            $QR = $img;            //已经生成的原始二维码图    
          
            if (file_exists($logo)) {     
                $QR = imagecreatefromstring(file_get_contents($QR));        //目标图象连接资源。  
                $logo = imagecreatefromstring(file_get_contents($logo));    //源图象连接资源。  
		        $QR_width = imagesx($QR);           //二维码图片宽度     
                $QR_height = imagesy($QR);          //二维码图片高度     
                $logo_width = imagesx($logo);       //logo图片宽度     
                $logo_height = imagesy($logo);      //logo图片高度     
                $logo_qr_width = 320;     //组合之后logo的宽度(占二维码的1/5)  
                $scale = $logo_width/$logo_qr_width;    //logo的宽度缩放比(本身宽度/组合后的宽度)  
                $logo_qr_height = $logo_height/$scale;  //组合之后logo的高度  
                $from_width = 1800;   //组合之后logo左上角所在坐标点  
                $right = 110;
                // var_dump($from_width);die;
                //重新组合图片并调整大小  
                /* 
                 *  imagecopyresampled() 将一幅图像(源图象)中的一块正方形区域拷贝到另一个图像中 
                 */  
                imagecopyresampled($QR, $logo,$right , $from_width, 0, 0, $logo_qr_width,$logo_qr_height, $logo_width, $logo_height);   
            }     
            
            //输出图片    
            $res1 = imagepng($QR, './Uploads/qrcode/'.md5($id).'.png');
            // $res2 = imagedestroy($QR);  
            imagedestroy($logo);
        }
        
            // 合成头像
        if($res1){
            $logo = $head;           //准备好的logo图片     
            $QR = './Uploads/qrcode/'.md5($id).'.png';            //已经生成的原始二维码图    
          
            if (file_exists($logo)) {     
                $QR = imagecreatefromstring(file_get_contents($QR));        //目标图象连接资源。  
                $logo = imagecreatefromstring(file_get_contents($logo));    //源图象连接资源。  
                $QR_width = imagesx($QR);           //二维码图片宽度     
                $QR_height = imagesy($QR);          //二维码图片高度     
                $logo_width = imagesx($logo);       //logo图片宽度     
                $logo_height = imagesy($logo);      //logo图片高度     
                $logo_qr_width = 127;     //组合之后logo的宽度(占二维码的1/5)  
                $scale = $logo_width/$logo_qr_width;    //logo的宽度缩放比(本身宽度/组合后的宽度)  
                $logo_qr_height = $logo_height/$scale;  //组合之后logo的高度  
                $from_width = 815;   //组合之后logo左上角所在坐标点  
                $right = 50;
                // var_dump($from_width);die;
                //重新组合图片并调整大小  
                /* 
                 *  imagecopyresampled() 将一幅图像(源图象)中的一块正方形区域拷贝到另一个图像中 
                 */  
                imagecopyresampled($QR, $logo,$right , $from_width, 0, 0, $logo_qr_width,$logo_qr_height, $logo_width, $logo_height);   
            }     
            
            //输出图片    
            $head = imagepng($QR, './Uploads/qrcode/'.md5($id).'.png');
            // $res2 = imagedestroy($QR);  
            imagedestroy($logo);


            if($head){ 
                $src = './Uploads/qrcode/'.md5($id).'.png';
                //2.获取图片信息  
                $info = getimagesize($src);  
                //3.通过编号获取图像类型  
                $type = image_type_to_extension($info[2],false);  
                //4.在内存中创建和图像类型一样的图像  
                $fun = "imagecreatefrom".$type;  
                //5.图片复制到内存  
                $image = $fun($src);  
                  
                /*操作图片*/  
                //1.设置字体的路径  
                $font = "./Uploads/qrcode/fzlt.ttf";  
                //2.填写水印内容  
                //3.设置字体颜色和透明度  
                $color1 = imagecolorallocatealpha($image, 255, 255, 255, 0);  // 昵称
                $color2 = imagecolorallocatealpha($image, 255, 255, 255, 0);   // ID
                $color3 = imagecolorallocatealpha($image, 251, 216, 137, 0);   // 邀请码
                //4.写入文字  
                imagettftext($image, 40, 0, 450, 810, $color1, $font, $nickname);  // 昵称 
                imagettftext($image, 40, 0, 450, 897, $color2, $font, $id);  // ID 
                imagettftext($image, 40, 0, 450, 988, $color3, $font, $agentid);  //  邀请码
                /*输出图片*/  
                //浏览器输出  
                header("Content-type:".$info['mime']);  
                $fun = "image".$type;  
                // $fun($image);  
                //保存图片  
                // $fun($image,'./Uploads/qrcode/'.md5($id).'.'.$type);  
                imagepng($image,'./Uploads/qrcode/'.md5($id).'.'.$type);
                /*销毁图片*/  
                imagedestroy($image);
            }
    }
}



    //向个人发送邮件
    public function personal_send_email($userid,$l,$agentid=''){
            // $userid = (int)I('userid');
            $level = [1=>'一','二','三'];
            $title = "恭喜成为至尊娱乐棋牌{$level[$l]}级代理";
            $content = "恭喜成为至尊娱乐棋牌{$level[$l]}级代理，您的邀请码为{$agentid}. 祝您生活愉快！！！";
            $send_name = '系统';
            $socket = \Socket::get();
            $send   = new \SendFunction();
            $emailPacket = $send -> makeEmailPacket(101,$send_name,$title,'',$content,$userid);
            if($socket->connet == false)    $this->error('添加失败,连接服务器失败');
            $res = $socket->send($send::EmailID,1,0,$emailPacket);
            if(!$res){
                $this->error('发布失败,给服务器发送消息失败');
            }
            $read = unpack('i*',$socket->read_data(1024));
            if(!$read){
                $this->error('发布失败，服务器未响应');
            }
            if($read[4] != 0){
                $this->error('发布失败，服务器响应错误码为'.$read[4]);
            }
    }



    //验证银行卡合法性
    protected function check_bankcard($no=''){
        $arr_no = str_split($no);
        $last_n = $arr_no[count($arr_no)-1];
        krsort($arr_no);
        $i = 1;
        $total = 0;
        foreach ($arr_no as $n){
            if($i%2==0){
                $ix = $n*2;
                if($ix>=10){
                    $nx = 1 + ($ix % 10);
                    $total += $nx;
                }else{
                    $total += $ix;
                }
            }else{
                $total += $n;
            }
            $i++;
        }
        $total -= $last_n;
        $total *= 9;
        if($last_n == ($total%10)){
            echo '符合Luhn算法';
        }
    }
    //获取上级代理的登录账号以及邀请码
    protected function get_superior($userid){
        $agentID = M('Bindagentid')->where(['userID'=>$userid])->getField('agentID');
        $res= [];
        if(!$agentID){
            $res['superior_agentid'] = '';
            $res['superior_username'] = '';
        }else{
            $res['superior_agentid'] = $agentID; 
            $username = M('Agentmember')->where(['agentid'=>$agentID])->getField('username');
            $res['superior_username'] = $username;
        }
        return $res;
    }

    //获取agentid
    protected function get_max_agentid(){
        // $max_agentid = M('Agentmember')->max('agentid');
        // if(!$max_agentid){
        //     $max_agentid = 10000;
        // }
        $agentid = rand(mt_rand(1,9).mt_rand(0,9).mt_rand(1,9).mt_rand(1,9).mt_rand(1,9).mt_rand(1,9),mt_rand(1,9).mt_rand(1,9).mt_rand(1,9).mt_rand(1,9).mt_rand(1,9).mt_rand(0,9));
        return $agentid;
    }   
    //绑定推荐码
    public function agentid_bind(){
        if(IS_POST){
            $data['id'] = I('id');
            $data['superior_agentid'] = I('superior_agentid');
            $member = M('Agentmember')->where(['agentid'=>$data['superior_agentid']])->find();
            if(!$member){
                $this->error('该邀请码不存在');
            }
            $my = M('Agentmember')->find($data['id']);
            if($data['superior_agentid'] == $my['agentid']){
                $this->error('不能绑定自己的邀请码');
            }
            $this->xiaji($my['agentid']);
            if(in_array($data['superior_agentid'],$this->xiaji)){
                $this->error('不能绑定自己的下级代理邀请码');
            }
            $data['superior_username'] = $member['username'];
            if(M('Agentmember')->save($data)){
                $redis = \GetRedis::get();
                $username = iconv('ASCII','UTF-8',$redis->redis->hget('userInfo|'.$member[$k]['userid'],'name'));
                //绑定成功后在绑定中生成数据
                $data = [
                    'userID' => $my['userid'],
                    'agentID'=> $data['superior_agentid'],
                    'username'=>$username,
                    'agentname'=>$member['username'],
                    'bind_time'=>time(),
                ];
                M('Bindagentid')->add($data);
                 operation_record(UID,'为代理用户名为'.$my['username'].'绑定邀请码'.$data['superior_agentid']);
                $this->success('绑定成功');
            }else{
                $this->error('绑定失败');
            }
        }else{
            $id = I('id');
            $this->assign('id',$id);
            $this->display();
        }
    }

    // 代理链
    public function agent_list(){
        $where['superior_agentid'] = '';
        $agent = M('agentmember')->where($where)->select();
	
        // 自己充值
        foreach($agent as &$v){
            $v['money'] = (int)M('rechargecommission')->where(['recharge_userid'=>$v['userid']])->sum('recharge_amount');
	}

	// 下面会员
        foreach($agent as &$v){
            $data = self::agentTree($v['agentid']);
	    $v['count'] = $data['count'];
            $v['money'] += $data['balance'];
        }
	
        // 排序
        $ages = array();
        foreach ($agent  as $value) {
          $m[] = $value['money'];
        }

        array_multisort($m, SORT_DESC, $agent);
	
        $this->assign('_data',$agent);
        //$this->assign('_page',$agent['_page']);
        $this->display();
    }

    // 统计 金额 人数
    protected  static function agentTree($agentid){
       $agent = M('bindagentid')->where(['agentID'=> $agentid])->select();
        if($agent){
            foreach($agent as $k=>$v){
		$map['recharge_userid'] = $v['userid'];
		$map['bind_agentid'] = array('neq','');
                //$balance += (int)M('rechargecommission')->where(['recharge_userid'=>$v['userid'],'bind_agentid'=>['neq'=>'']])->sum('recharge_amount'); 
                $balance += (int)M('rechargecommission')->where($map)->sum('recharge_amount'); 
		$count ++;
	   }
       
        }

        return ['balance'=>$balance,'count'=>$count];
    }

    public function xiaji($agentid){
        $x = M('Agentmember')->where(['superior_agentid'=>$agentid])->select();
        if($x){
            foreach($x as $k => $v){
                $this->xiaji[] = $x[$k]['agentid'];
                $this->xiaji($x[$k]['agentid']);
            }
        }
    }

    //账单充值明细
    public function bill_detail(){
        $type = I('type');
        $search = I('search');
        if($type && $search){
            switch($type){
                case 1:
                $where['recharge_userid'] = $search;
                break;
                case 2:
                $where['recharge_name'] = $search;
                break;
                case 3:
                $where['bind_agentid'] = $search;
                break;
                case 4:
                $where['bind_username'] = $search;
                break;
                case 5:
                $where['bind_userid'] = $search;
                break;
            }
        }
        $start = I('start');
        $stop = I('stop');
        if($start && $stop){
            $start = strtotime($start);
            $stop = strtotime($stop);
            $where['recharge_time'] = ['between',[$start,$stop]];
        }
        $data = D('Data')->get_all_data('Rechargecommission',$where,10,'recharge_time desc');
        foreach($data['_data'] as $k => $v){
            $data['_data'][$k]['recharge_amount'] = sprintf("%.2f",$data['_data'][$k]['recharge_amount']/100);
            $data['_data'][$k]['bind_member_commission'] = sprintf("%.2f",$data['_data'][$k]['bind_member_commission']/100);
            $data['_data'][$k]['level2_member_commission'] = sprintf("%.2f",$data['_data'][$k]['level2_member_commission']/100);
            $data['_data'][$k]['level3_member_commission'] = sprintf("%.2f",$data['_data'][$k]['level3_member_commission']/100);
        }
        $this->assign('_data',$data['_data']);
        $this->assign('_page',$data['_page']);
        $this->display();
    }

    //代理信息统计
    public function info_count(){
        //获取各级代理的人数
        $level1_count = M('Agentmember')->where(['agent_level'=>1])->count();
        $level2_count = M('Agentmember')->where(['agent_level'=>2])->count();
        $level3_count = M('Agentmember')->where(['agent_level'=>3])->count();
        $level_count = $level1_count + $level2_count + $level3_count;
        //用户充值总额
        $where = [
            'consumeType' => 0,
            'status'=> 1,
        ];
        $user_recharge_sum = sprintf("%.2f",M('Orders')->where($where)->sum('consumeNum')/100);
        //所有代理余额
        $member_balance_sum = sprintf("%.2f",M('Agentmember')->sum('balance')/100);
        //代理提现总额
        $member_pos_sum = sprintf("%.2f",M('Agentmember')->sum('history_pos_money')/100);
        $this->assign('level1_count',$level1_count);
        $this->assign('level2_count',$level2_count);
        $this->assign('level3_count',$level3_count);
        $this->assign('level_count',$level_count);
        $this->assign('user_recharge_sum',$user_recharge_sum);
        $this->assign('member_balance_sum',$member_balance_sum);
        $this->assign('member_pos_sum',$member_pos_sum);
        $this->display();
    }

    //代理提现申请记录
    public function apply_pos(){
        $type = I('type');
        $search = I('search');
        if($type && $search){
            switch($type){
                case 1:
                $where['username'] = $search;
                break;
                case 2:
                $where['userid'] = $search;
                break;
                case 3:
                $where['agentid'] = $search;
                break;
                case 4:
                $where['wechat'] = $search;
                break;
            }
        }
        $start = I('start');
        $stop = I('stop');
        if($start && $stop){
            $start = strtotime($start);
            $stop = strtotime($stop);
            $where['apply_time'] = ['between',[$start,$stop]];
        }
        $status = I('status',0);
        $where['status'] = $status;
        $data = D('Data')->get_all_data('Agentapplypos',$where,10,'apply_time desc');
        foreach($data['_data'] as $k => $v){
            $data['_data'][$k]['front_balance'] = sprintf("%.2f",$data['_data'][$k]['front_balance']/100);
            $data['_data'][$k]['apply_amount'] = sprintf("%.2f",$data['_data'][$k]['apply_amount']/100);
            $data['_data'][$k]['after_balance'] = sprintf("%.2f",$data['_data'][$k]['after_balance']/100);
        }
        $this->assign('status',$status);
        $this->assign('_data',$data['_data']);
        $this->assign('_page',$data['_page']);
        $this->display();
    }

    //审核通过
    public function examine_pass(){
        $id = array_unique((array)I('id',0));
        if ( empty($id) || empty($id[0]) ) {
            $this->error('请选择要操作的数据');
        }
        $map = array('id' => array('in', $id) );
        if(M('Agentapplypos')->where($map)->save(array('status'=>1,'handle_time'=>time()))){
            //发送邮件
            operation_record(UID,'通过代理提现审核');
            $this->success('操作成功');
        } else {
            $this->error('操作失败');
        }
    }
/*
    //拒绝
    public function examine_refuse(){
        $id = I('id');
        $apply = M('Agentapplypos')->find($id);
        $apply_amount = $apply['apply_amount'];
        $username = $apply['username'];
        $data['id'] = $id;
        $data['status'] = 2;
        $res = M('Agentapplypos')->where()->save();
        $res = M('Agentmember')->where(['username'=>$username])->setInc('balance',$apply_amount);

    }*/



    //验证合法性
    public function ajax_check($v,$type){
        switch ($type) {
            //验证用户名
            case 1:
                if(M('Agentmember')->where(['username'=>$v])->find()){
                    $this->error('用户名已经存在');
                }
            break;
            //验证游戏ID
            case 2:
                 if(M('Agentmember')->where(['userid'=>$v])->find()){
                    $this->error('游戏ID已经存在');
                }
            break;
            //验证银行卡
            case 3:
                 if(M('Agentmember')->where(['bankcard'=>$v])->find()){
                    $this->error('银行卡号已经存在');
                }
            break;
            //验证微信
            case 4:
                 if(M('Agentmember')->where(['wechat'=>$v])->find()){
                    $this->error('微信账号已经存在');
                }
            break;
        }
        $this->success('可使用');
    }

    //代理参数配置
    public function agent_config(){
        if(IS_POST){
            $config = $_POST;
            foreach($config as $k=>&$v){
                M('agentconfig')->where(['key'=>$k])->save(['value'=>(int)$v]);
            }
            $this->success('配置修改成功');
        }else{
           $config = M('agentconfig')->select();
           $this->assign('config',$config);
           $this->display(); 
        }
    }


    //代理后台充值账单
    public function agent_recharge_detail(){
        $where = [];
        $type = I('type');
        $search = I('search');
        if($type && $search){
            switch($type){
                case 1:
                $where['userid'] = $search;
                break;
            }
        }
        $start = I('start');
        $stop = I('stop');
        if($start && $stop){
            $start = strtotime($start);
            $stop = strtotime($stop);
            $where['time'] = ['between',[$start,$stop]];
        }
        $data = D('Data')->get_all_data('agentrecharge',$where,15,'id id');
        $this->assign('_page',$data['_page']);
        $this->assign('_data',$data['_data']);
        $this->display();
    }


    //代理操作
    public function agent_edit(){
        if(IS_POST){
            $data = [
                // 'id'            => I('id'),
                'username'      => I('username'),
                'userid'        => I('userid'),
                'agent_level'   => I('agent_level'),
                'disabled'      => I('disabled'),
                'agentid'       => I('agentid'),
                'wechat'       => I('wechat'),
            ];
            $agent_old_info = $this->get_agent_info(I('id'));
            /*
            *以下字段发生变更后，分佣表  绑定邀请码表  账单详情表都需要同步
            */
            //手机号变更 
            if($data['username'] != $agent_old_info['username']){
                $this->synchro_change_username($data['username'], $agent_old_info['username']);
            }
            // 游戏ID变更
            if($data['userid'] != $agent_old_info['userid']){
                $this->synchro_change_userid($data['userid'], $agent_old_info['userid']);
            }

            // 邀请码变更
            if($data['agentid'] != $agent_old_info['agentid']){
                $this->synchro_change_agentid($data['agentid'], $agent_old_info['agentid']);
            }

            $password = I('password','');
            $repassword = I('repassword','');
            if(!empty($password)){
                if($password != $repassword){
                    $this->error('两次输入密码不一致!');
                }

                $data['password'] = md5($password);
            }

            $res = M('agentmember')->where(['id'=>I('id')])->save($data);
            if($res) {
                $url = 'http://ht.szhuomei.com/Home/Wechat/share/userID/'.$data['userid'].'/agentID/'.$data['agentid'];
                $find = M()->table('userInfo')->where(['userID'=>$data['userid']])->find();
                $this->download_file($find['headurl'],'./Uploads/qrcode/'.md5('Agent'.$find['userid']).'.jpg');
                $this->scerweima1($url,$data['userid'],'./Uploads/qrcode/'.md5('Agent'.$find['userid']).'.jpg',$find['name'],$data['agentid']);
		 $res = D('Home/Message')->agentQrcode(I('id'));
                if(!$res){
                    $this->error('生成二维码失败!');
                }

                $this->success('修改成功');
            } else {
                $this->success('修改失败');
            }
            
            
        }else{
            $id = I('id');
            //获取该代理的信息
            $agent = $this->get_agent_info($id);
            $this->assign('agent',$agent);
            $level = $this->get_agent_level();
            $this->assign('level',$level);
            $this->display();
        }
    }
   
 
    public function test(){
        $data = M('agentmember')->select();
        foreach($data as $k=>$v){
            $url = 'http://ht.szhuomei.com/Home/Wechat/share/userID/'.$v['userid'].'/agentID/'.$v['agentid'];
            $find = M()->table('userInfo')->where(['userID'=>$v['userid']])->find();
            $this->download_file($find['headurl'],'./Uploads/qrcode/'.md5('Agent'.$find['userid']).'.jpg');
            $this->scerweima1($url,$find['userid'],'./Uploads/qrcode/'.md5('Agent'.$find['userid']).'.jpg',$find['name'],$v['agentid']);
            echo $k;
        }

     }

    //同步变更用户名
    protected function synchro_change_username($username,$oldusername){
        //验证
        if(!preg_match("/^1[34578]\d{9}$/",$username)){$this->error('请输入正确的用户名(手机号)');}
        $res = M('agentmember')->where(['username'=>$username])->find();
        if($res){
            $this->error('该用户名已被使用');
        }
        //账单详情
        $billdetail = M('billdetail')->field('id,username')->select();
        foreach($billdetail as $k=>$v){
            if($billdetail[$k]['username'] == $oldusername){
                M('billdetail')->save(['id'=>$billdetail[$k]['id'],'username'=>$username]);
            }
        }
        //绑定代理
        $bindagentid = M('bindagentid')->field('id,agentname')->select();
        foreach($bindagentid as $k=>$v){
            if($bindagentid[$k]['agentname'] == $oldusername){
                M('bindagentid')->save(['id'=>$bindagentid[$k]['id'],'agentname'=>$username]);
            }
        }
        //分佣
        $commission = M('rechargecommission')->field('id,bind_username,level2_username,level3_member_username')->select();
        foreach($commission as $k=>$v){
            if($commission[$k]['bind_username'] == $oldusername){
                M('rechargecommission')->save(['id'=>$commission[$k]['id'],'bind_username'=>$username]);
            }
            if($commission[$k]['level2_username'] == $oldusername){
                M('rechargecommission')->save(['id'=>$commission[$k]['id'],'level2_username'=>$username]);
            }
            if($commission[$k]['level3_member_username'] == $oldusername){
                M('rechargecommission')->save(['id'=>$commission[$k]['id'],'level3_member_username'=>$username]);
            }
        }
        //代理表
        $agent_member = M('agentmember')->field('id,username,superior_username')->select();
        foreach($agent_member as $k=>$v){
            if($agent_member[$k]['username'] == $oldusername){
                M('agentmember')->save(['id'=>$agent_member[$k]['id'],'username'=>$username]);
            }
            if($agent_member[$k]['superior_username'] == $oldusername){
                M('agentmember')->save(['id'=>$agent_member[$k]['id'],'superior_username'=>$username]);
            }
        }
        //代理申请提现表
        $apply = M('agentapplypos')->field('id,username')->select();
        foreach($apply as $k=>$v){
            if($apply[$k]['username'] == $oldusername){
                M('agentapplypos')->save(['id'=>$apply[$k]['id'],'username'=>$username]);
            }
        }
    }

    //同步变更游戏ID
    protected function synchro_change_userid($userid,$olduserid){
        if((int) $userid == 0){
            $this->error('游戏ID必须是一个数字');
        }

        //检测用户是否存在
        $isUserid =  M('agentmember')->where(['userid'=>$userid])->find();
        if($isUserid){
        	$this->error('游戏ID已经存在');
        }

        // 更改代理表
        $agentid = M('agentmember')->where(['userid'=>$olduserid])->getfield('id');
       	$res = M('agentmember')->save(['id'=>$agentid, 'userid'=>$userid]);
        // 更改绑定代理表
        $bind = M('bindagentid')->where(['userid'=>$olduserid])->getfield('id');
		// M('bindagentid')->save(['userid'=>$olduserid, 'userID'=>$userid]);
        M('bindagentid')->save(['id'=>$bind, 'userID'=>$userid]);
		// 更改分佣表
		$commissionData = M('rechargecommission')->where(['recharge_userid'=>$olduserid])->field('id,recharge_userid')->select();
		if($commissionData){
			foreach($commissionData as $v){
                if($v['recharge_userid'] == $olduserid){
                    M('rechargecommission')->where(['id'=>$v['id']])->save(['recharge_userid'=>$userid]);
                }
			}	
		}


		// 更改提现表        
		$applyData = M('agentapplypos')->field('id,userid')->select();
		if($applyData) {
			foreach($applyData as $v) {
                if($v['userID'] == $olduserid || $v['userid'] == $olduserid){
                    M('agentapplypos')->where(['id'=>$v['id']])->save(['userID'=>$userid]);
                }

			}
		}

        // 抽奖记录
        $turntableData = M('turntablerecord')->field('id,userID')->select();
        if($turntableData){
            foreach($turntableData as $v){
                if($v['userid'] == $olduserid){
                    M('turntablerecord')->where(['id'=>$v['id']])->save(['userID'=>$userid]);
                }

            }
        }
        
    }

    //同步变更邀请码
    protected function synchro_change_agentid($agentid,$oldagentid){
        //验证
        if(!is_numeric($agentid) || strlen($agentid) != 6){
            $this->error('邀请码格式错误');
        }

        $res = M('agentmember')->where(['agentid'=>$agentid])->find();
        if($res){
            $this->error('邀请码已被使用');
        }

        //绑定代理表
        $bindagentid = M('bindagentid')->field('id,agentid')->select();
        foreach($bindagentid as $k=>$v){
            if($bindagentid[$k]['agentid'] == $oldagentid){
                M('bindagentid')->where(['id'=>$bindagentid[$k]['id']])->save(['agentID'=>$agentid]);
            }
        }

        //分佣表
        $commission = M('rechargecommission')->field('id,bind_agentid')->select();
        foreach($commission as $k=>$v){
            if($commission[$k]['bind_agentid'] == $oldagentid){
                M('rechargecommission')->save(['id'=>$commission[$k]['id'],'bind_agentid'=>$agentid]);
            }
        }

        //代理表
        $agent_member = M('agentmember')->field('id,agentid,superior_agentid')->select();
        foreach($agent_member as $k=>$v){
            if($agent_member[$k]['agentid'] == $oldagentid){
                // M('agentmember')->save(['id'=>$agent_member[$k]['id'],'aegntid'=>$oldagentid]);
                M('agentmember')->where(['id'=>$agent_member[$k]['id']])->save(['aegntid'=>$oldagentid]);
            }

            if($agent_member[$k]['superior_agentid'] == $oldagentid){
                // M('agentmember')->save(['id'=>$agent_member[$k]['id'],'superior_agentid'=>$agentid]);
                M('agentmember')->where(['id'=>$agent_member[$k]['id']])->save(['aegntid'=>$agentid]);
            }
        }

    }

    //获取代理信息
    protected function  get_agent_info($id){
        $agent = M('agentmember')->find($id);
        return $agent;
    }   

    //获取代理等级
    protected function get_agent_level(){
        $level = M('agentgroup')->select();
        return $level;
    }


     // 代理审核
    public function examine(){
        $type = I('type');
        $search = I('search');
        if($type && $search){
            switch($type){
                case 1:
                $where['username'] = $search;
                break;
                case 2:
                $where['userid'] = $search;
                break;
                case 3:
                $where['gamename'] = $search;
                break;
                case 4:
                $where['agentid'] = $search;
                break;
                case 5:
                $where['real_name'] = $search;
                break;
            }
        }
        $start = I('start');
        $stop = I('stop');
        if($start && $stop){
            $start = strtotime($start);
            $stop = strtotime($stop);
            $where['register_time'] = ['between',[$start,$stop]];
        }
        $data = D('Data')->get_all_data('agencyaudit',$where,10,'id desc');
        foreach($data['_data'] as $k=>$v){
            $data['_data'][$k]['gamename'] = M()->table('userInfo')->where(['userID'=>$v['userid']])->getField('name');
            $data['_data'][$k]['money'] = M()->table('userInfo')->where(['userID'=>$v['userid']])->getField('money');
            $data['_data'][$k]['jewels'] = M()->table('userInfo')->where(['userID'=>$v['userid']])->getField('jewels');
        }
        $this->assign('_page',$data['_page']);
        $this->assign('_data',$data['_data']);
        $this->display();
    }

    // 代理审核
    public function examine_edit(){
            $data =  I('get.');
            if($data['status'] == 0){
                // 审核
                $agentData = M('agencyaudit')->where(['id'=>$data['id']])->find();
                $newData = [
                    'username' => $agentData['username'],
                    'userid' =>   $agentData['userid'],
                    'password' => $agentData['password'],
                    'agent_level' => $agentData['agent_level'],
                    'superior_agentid' => $agentData['superior_agentid'],
                    'agentid' => $agentData['agentid'],
                    'superior_username' => $agentData['superior_username'],
                    'register_time' => time(),
                    'wechat' => $agentData['wechat'],
                    'bankcard' => $agentData['bankcard'],
                    'balance' => $agentData['balance'],
                    'disabled' => $agentData['disabled'],
                    'not_under_money' => $agentData['not_under_money'],
                    'under_money' => $agentData['under_money'],
                    'email' => $agentData['email'],
                ];

                if(M('Agentmember')->data($newData)->add()){
                        M('agencyaudit')->where(['id'=>$data['id']])->save(['status'=>0]);
                        operation_record(UID,'代理审核'.$data['username']);
                        // $this->personal_send_email($data['userid'],$data['agent_level'],$data['agentid']);
                        $this->success('操作成功');
                } else {
                    $this->error('操作失败');
                }


            } else {
                // 未审核
                $res = M('agencyaudit')->where(['id'=>$data['id']])->save(['status'=>2]);
                if($res){
                    $this->success('操作成功');
                } else {
                    $this->error('操作失败');
                }
            }
    }

     // 代理申请
    public function apply(){
        $Agent = M('agent_apply');
        $count = $Agent->count();
        $Page = new \Think\Page($count,25);
        $show = $Page->show();
        $list = $Agent
            ->alias('a')
            ->join('left join userInfo as u on u.userID=a.user_id')
            ->join('left join web_bindagentid as b on b.userID=a.user_id')
            ->join('left join web_agentmember as m on m.agentid=b.agentID')
            ->field('a.*,b.agentID,m.agent_level')
            ->order('addtime desc')
            ->limit($Page->firstRow.','.$Page->listRows)
            ->select();
        $this->assign('list',$list);
        $this->assign('page',$show);
        $this->display();
    }

    // 代理审核
    public function apply_edit(){
        if(IS_POST){
            $data = I('post.');
            $res = M('agent_apply')->save($data);
            $user = M('agent_apply')->where(['id'=>$data['id']])->find();
            D('Home/Message')->tplMessage($data['status'],$user['openid'],$user);
            if($res){
                $this->success('操作成功');
            } else {
                $this->error('操作失败');
            }
        } else {
            $id = I('id',0);
            $this->assign('id',$id);
            $this->display();
        }
    }


      public function addMedia(){
	//$map['media_id'] = ['eq',''];
        $member = M('agentmember')->where(['id'=>['in','64,67,73']])->select();
      //dump($member);die;
	foreach($member as $k=>$agent){
            $find = M()->table('userInfo')->where(['userID'=>$agent['userid']])->find();
        	//echo $find['headurl']."<br/>";    
	$this->download_file($find['headurl'],'./Uploads/qrcode/'.md5('Agent'.$find['userid']).'.jpg');
          $url = 'http://ht.szhuomei.com/Home/Wechat/share/userID/'.$agent['userid'].'/agentID/'.$agent['agentid'];
	$this->scerweima1($url,$agent['userid'],'./Uploads/qrcode/'.md5('Agent'.$find['userid']).'.jpg',$find['name'],$agent['agentid']);
	//sleep(10);
	//$res = D('Home/Message')->agentQrcode($agent['id']);
	  //echo $res;
	    //echo $k."OK";
        }

    } 
}
